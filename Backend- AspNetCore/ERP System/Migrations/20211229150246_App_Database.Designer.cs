// <auto-generated />
using System;
using ERP_System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ERP_System.Migrations
{
    [DbContext(typeof(Application_Identity_DbContext))]
    [Migration("20211229150246_App_Database")]
    partial class App_Database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ERP_System.Models.HR.UsersAccounts.Employee_UserAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ConsumeUnit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<int?>("Item_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Item_Id");

                    b.ToTable("Materials_ConsumeUnit");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.Equivalence_Group", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupID");

                    b.ToTable("Equivalence_Group");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultConsumeUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("MarketCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemCategoryId", "Name", "Company" }, "Item Name And Company must be unique in category")
                        .IsUnique();

                    b.ToTable("Materials_Item");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("defaultConsumeUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("parentID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("parentID", "name")
                        .IsUnique();

                    b.ToTable("Materials_ItemCategory");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCategorySpec", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("index")
                        .HasColumnType("int");

                    b.Property<bool>("isRestricted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "CategoryID", "index" }, "Unique Index In Category Spec's")
                        .IsUnique();

                    b.HasIndex(new[] { "CategoryID", "name" }, "Unique name In Category Spec's")
                        .IsUnique();

                    b.ToTable("Materials_ItemCategorySpec");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCategorySpec_Item_Value", b =>
                {
                    b.Property<int?>("ItemSpec_id")
                        .HasColumnType("int");

                    b.Property<int?>("Item_Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ItemSpec_id");

                    b.HasIndex("Item_Id");

                    b.ToTable("Materials_ItemCategorySpec_Item_Value");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCategorySpec_Options", b =>
                {
                    b.Property<int>("OptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ItemCategorySpec_id")
                        .HasColumnType("int");

                    b.Property<string>("OptionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OptionID");

                    b.HasIndex("ItemCategorySpec_id");

                    b.ToTable("Materials_ItemCategorySpec_Restrict_Options");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCategorySpec_Restrict_Item_Value", b =>
                {
                    b.Property<int?>("ItemSpec_Options_OptionID")
                        .HasColumnType("int");

                    b.Property<int?>("ItemSpec_id")
                        .HasColumnType("int");

                    b.Property<int?>("itemId")
                        .HasColumnType("int");

                    b.HasIndex("ItemSpec_Options_OptionID");

                    b.HasIndex("ItemSpec_id");

                    b.HasIndex("itemId");

                    b.ToTable("Materials_ItemCategorySpec_Restrict_Item_Value");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCommonSellPrice", b =>
                {
                    b.Property<int?>("ConsumeUnit_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Item_Id")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("SellType_SellTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("_TradeStateTradeStateID")
                        .HasColumnType("int");

                    b.HasIndex("ConsumeUnit_ID");

                    b.HasIndex("Item_Id");

                    b.HasIndex("SellType_SellTypeID");

                    b.HasIndex("_TradeStateTradeStateID");

                    b.ToTable("Materials_ItemCommonSellPrice");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemFile", b =>
                {
                    b.Property<long>("FileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int?>("Item_Id")
                        .HasColumnType("int");

                    b.HasKey("FileID");

                    b.HasIndex("Item_Id");

                    b.ToTable("Materials_ItemFile");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemRelation", b =>
                {
                    b.Property<int?>("AnotherItemId")
                        .HasColumnType("int");

                    b.Property<bool>("Inherit")
                        .HasColumnType("bit");

                    b.Property<int?>("Item_Id")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Relation_")
                        .HasColumnType("int");

                    b.HasIndex("AnotherItemId");

                    b.HasIndex("Item_Id");

                    b.ToTable("Materials_ItemRelation");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.Item_Equivalence_Relation", b =>
                {
                    b.Property<int?>("_Equivalence_GroupGroupID")
                        .HasColumnType("int");

                    b.Property<int?>("_ItemId")
                        .HasColumnType("int");

                    b.HasIndex("_Equivalence_GroupGroupID");

                    b.HasIndex("_ItemId");

                    b.ToTable("Materials_Item_Equivalence_Relation");
                });

            modelBuilder.Entity("ERP_System.Models.Trade.SellType", b =>
                {
                    b.Property<int>("SellTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SellTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SellTypeID");

                    b.ToTable("SellType");
                });

            modelBuilder.Entity("ERP_System.Models.Trade.TradeState", b =>
                {
                    b.Property<int>("TradeStateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TradeStateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TradeStateID");

                    b.ToTable("TradeState");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ConsumeUnit", b =>
                {
                    b.HasOne("ERP_System.Models.Materials.Item", "Item_")
                        .WithMany()
                        .HasForeignKey("Item_Id");

                    b.Navigation("Item_");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.Item", b =>
                {
                    b.HasOne("ERP_System.Models.Materials.ItemCategory", "ItemCategory")
                        .WithMany()
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCategory", b =>
                {
                    b.HasOne("ERP_System.Models.Materials.ItemCategory", null)
                        .WithMany()
                        .HasForeignKey("parentID");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCategorySpec", b =>
                {
                    b.HasOne("ERP_System.Models.Materials.ItemCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCategorySpec_Item_Value", b =>
                {
                    b.HasOne("ERP_System.Models.Materials.ItemCategorySpec", "ItemSpec_")
                        .WithMany()
                        .HasForeignKey("ItemSpec_id");

                    b.HasOne("ERP_System.Models.Materials.Item", "Item_")
                        .WithMany()
                        .HasForeignKey("Item_Id");

                    b.Navigation("Item_");

                    b.Navigation("ItemSpec_");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCategorySpec_Options", b =>
                {
                    b.HasOne("ERP_System.Models.Materials.ItemCategorySpec", "ItemCategorySpec_")
                        .WithMany()
                        .HasForeignKey("ItemCategorySpec_id");

                    b.Navigation("ItemCategorySpec_");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCategorySpec_Restrict_Item_Value", b =>
                {
                    b.HasOne("ERP_System.Models.Materials.ItemCategorySpec_Options", "ItemSpec_Options_")
                        .WithMany()
                        .HasForeignKey("ItemSpec_Options_OptionID");

                    b.HasOne("ERP_System.Models.Materials.ItemCategorySpec", "ItemSpec_")
                        .WithMany()
                        .HasForeignKey("ItemSpec_id");

                    b.HasOne("ERP_System.Models.Materials.Item", "item")
                        .WithMany()
                        .HasForeignKey("itemId");

                    b.Navigation("item");

                    b.Navigation("ItemSpec_");

                    b.Navigation("ItemSpec_Options_");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemCommonSellPrice", b =>
                {
                    b.HasOne("ERP_System.Models.Materials.ConsumeUnit", "ConsumeUnit_")
                        .WithMany()
                        .HasForeignKey("ConsumeUnit_ID");

                    b.HasOne("ERP_System.Models.Materials.Item", "Item_")
                        .WithMany()
                        .HasForeignKey("Item_Id");

                    b.HasOne("ERP_System.Models.Trade.SellType", "SellType_")
                        .WithMany()
                        .HasForeignKey("SellType_SellTypeID");

                    b.HasOne("ERP_System.Models.Trade.TradeState", "_TradeState")
                        .WithMany()
                        .HasForeignKey("_TradeStateTradeStateID");

                    b.Navigation("_TradeState");

                    b.Navigation("ConsumeUnit_");

                    b.Navigation("Item_");

                    b.Navigation("SellType_");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemFile", b =>
                {
                    b.HasOne("ERP_System.Models.Materials.Item", "Item_")
                        .WithMany()
                        .HasForeignKey("Item_Id");

                    b.Navigation("Item_");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.ItemRelation", b =>
                {
                    b.HasOne("ERP_System.Models.Materials.Item", "AnotherItem")
                        .WithMany()
                        .HasForeignKey("AnotherItemId");

                    b.HasOne("ERP_System.Models.Materials.Item", "Item_")
                        .WithMany()
                        .HasForeignKey("Item_Id");

                    b.Navigation("AnotherItem");

                    b.Navigation("Item_");
                });

            modelBuilder.Entity("ERP_System.Models.Materials.Item_Equivalence_Relation", b =>
                {
                    b.HasOne("ERP_System.Models.Materials.Equivalence_Group", "_Equivalence_Group")
                        .WithMany()
                        .HasForeignKey("_Equivalence_GroupGroupID");

                    b.HasOne("ERP_System.Models.Materials.Item", "_Item")
                        .WithMany()
                        .HasForeignKey("_ItemId");

                    b.Navigation("_Equivalence_Group");

                    b.Navigation("_Item");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ERP_System.Models.HR.UsersAccounts.Employee_UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ERP_System.Models.HR.UsersAccounts.Employee_UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP_System.Models.HR.UsersAccounts.Employee_UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ERP_System.Models.HR.UsersAccounts.Employee_UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
